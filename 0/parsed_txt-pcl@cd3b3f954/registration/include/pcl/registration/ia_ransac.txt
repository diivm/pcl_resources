TRANSLATION_UNIT:'/pcl/registration/include/pcl/registration/ia_ransac.h'
├── INCLUSION_DIRECTIVE:'pcl/memory.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/impl/ia_ransac.hpp'
├── INCLUSION_DIRECTIVE:'pcl/registration/registration.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/transformation_estimation_svd.h'
└── NAMESPACE:'pcl'
    └── CLASS_TEMPLATE:'SampleConsensusInitialAlignment'
        ├── CLASS_DECL:'ErrorFunctor'
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_METHOD:'operator()'
        │   │   └── PARM_DECL:'d'
        │   └── DESTRUCTOR:'~ErrorFunctor'
        ├── CLASS_DECL:'HuberPenalty'
        │   ├── CONSTRUCTOR:'HuberPenalty'
        │   │   └── COMPOUND_STMT:''
        │   ├── CONSTRUCTOR:'HuberPenalty'
        │   │   ├── COMPOUND_STMT:''
        │   │   ├── MEMBER_REF:'threshold_'
        │   │   ├── PARM_DECL:'threshold'
        │   │   └── UNEXPOSED_EXPR:'threshold'
        │   │       └── DECL_REF_EXPR:'threshold'
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_BASE_SPECIFIER:'class pcl::SampleConsensusInitialAlignment::ErrorFunctor'
        │   │   └── TYPE_REF:'class pcl::SampleConsensusInitialAlignment::ErrorFunctor'
        │   ├── CXX_METHOD:'operator()'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   └── IF_STMT:''
        │   │   │       ├── BINARY_OPERATOR:''
        │   │   │       │   ├── UNEXPOSED_EXPR:'e'
        │   │   │       │   │   └── DECL_REF_EXPR:'e'
        │   │   │       │   └── UNEXPOSED_EXPR:'threshold_'
        │   │   │       │       └── MEMBER_REF_EXPR:'threshold_'
        │   │   │       └── RETURN_STMT:''
        │   │   │           └── UNEXPOSED_EXPR:''
        │   │   │               └── PAREN_EXPR:''
        │   │   │                   └── BINARY_OPERATOR:''
        │   │   │                       ├── BINARY_OPERATOR:''
        │   │   │                       │   ├── FLOATING_LITERAL:''
        │   │   │                       │   └── UNEXPOSED_EXPR:'e'
        │   │   │                       │       └── UNEXPOSED_EXPR:'e'
        │   │   │                       │           └── DECL_REF_EXPR:'e'
        │   │   │                       └── UNEXPOSED_EXPR:'e'
        │   │   │                           └── UNEXPOSED_EXPR:'e'
        │   │   │                               └── DECL_REF_EXPR:'e'
        │   │   └── PARM_DECL:'e'
        │   └── FIELD_DECL:'threshold_'
        ├── CLASS_DECL:'TruncatedError'
        │   ├── CONSTRUCTOR:'TruncatedError'
        │   │   └── COMPOUND_STMT:''
        │   ├── CONSTRUCTOR:'TruncatedError'
        │   │   ├── COMPOUND_STMT:''
        │   │   ├── MEMBER_REF:'threshold_'
        │   │   ├── PARM_DECL:'threshold'
        │   │   └── UNEXPOSED_EXPR:'threshold'
        │   │       └── DECL_REF_EXPR:'threshold'
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_BASE_SPECIFIER:'class pcl::SampleConsensusInitialAlignment::ErrorFunctor'
        │   │   └── TYPE_REF:'class pcl::SampleConsensusInitialAlignment::ErrorFunctor'
        │   ├── CXX_METHOD:'operator()'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   ├── IF_STMT:''
        │   │   │   │   ├── BINARY_OPERATOR:''
        │   │   │   │   │   ├── UNEXPOSED_EXPR:'e'
        │   │   │   │   │   │   └── DECL_REF_EXPR:'e'
        │   │   │   │   │   └── UNEXPOSED_EXPR:'threshold_'
        │   │   │   │   │       └── MEMBER_REF_EXPR:'threshold_'
        │   │   │   │   └── RETURN_STMT:''
        │   │   │   │       └── PAREN_EXPR:''
        │   │   │   │           └── BINARY_OPERATOR:''
        │   │   │   │               ├── UNEXPOSED_EXPR:'e'
        │   │   │   │               │   └── DECL_REF_EXPR:'e'
        │   │   │   │               └── UNEXPOSED_EXPR:'threshold_'
        │   │   │   │                   └── MEMBER_REF_EXPR:'threshold_'
        │   │   │   └── RETURN_STMT:''
        │   │   │       └── UNEXPOSED_EXPR:''
        │   │   │           └── PAREN_EXPR:''
        │   │   │               └── FLOATING_LITERAL:''
        │   │   ├── CXX_OVERRIDE_ATTR:''
        │   │   └── PARM_DECL:'e'
        │   ├── DESTRUCTOR:'~TruncatedError'
        │   │   └── COMPOUND_STMT:''
        │   └── FIELD_DECL:'threshold_'
        ├── CONSTRUCTOR:'SampleConsensusInitialAlignment<PointSource, PointTarget, FeatureT>'
        ├── CXX_ACCESS_SPEC_DECL:''
        ├── CXX_ACCESS_SPEC_DECL:''
        ├── CXX_ACCESS_SPEC_DECL:''
        ├── CXX_METHOD:'computeErrorMetric'
        │   ├── PARM_DECL:'cloud'
        │   └── PARM_DECL:'threshold'
        ├── CXX_METHOD:'computeTransformation'
        │   ├── CXX_OVERRIDE_ATTR:''
        │   ├── PARM_DECL:'guess'
        │   └── PARM_DECL:'output'
        ├── CXX_METHOD:'findSimilarFeatures'
        │   ├── PARM_DECL:'corresponding_indices'
        │   ├── PARM_DECL:'input_features'
        │   └── PARM_DECL:'sample_indices'
        ├── CXX_METHOD:'getCorrespondenceRandomness'
        │   └── COMPOUND_STMT:''
        │       └── RETURN_STMT:''
        │           └── UNEXPOSED_EXPR:''
        │               └── PAREN_EXPR:''
        │                   └── MEMBER_REF_EXPR:'k_correspondences_'
        ├── CXX_METHOD:'getErrorFunction'
        │   ├── COMPOUND_STMT:''
        │   │   └── RETURN_STMT:''
        │   │       └── PAREN_EXPR:''
        │   │           └── MEMBER_REF_EXPR:'error_functor_'
        │   └── TYPE_REF:'pcl::SampleConsensusInitialAlignment::ErrorFunctorPtr'
        ├── CXX_METHOD:'getMinSampleDistance'
        │   └── COMPOUND_STMT:''
        │       └── RETURN_STMT:''
        │           └── UNEXPOSED_EXPR:''
        │               └── PAREN_EXPR:''
        │                   └── MEMBER_REF_EXPR:'min_sample_distance_'
        ├── CXX_METHOD:'getNumberOfSamples'
        │   └── COMPOUND_STMT:''
        │       └── RETURN_STMT:''
        │           └── UNEXPOSED_EXPR:''
        │               └── PAREN_EXPR:''
        │                   └── MEMBER_REF_EXPR:'nr_samples_'
        ├── CXX_METHOD:'getRandomIndex'
        │   └── COMPOUND_STMT:''
        ├── CXX_METHOD:'getSourceFeatures'
        │   └── COMPOUND_STMT:''
        ├── CXX_METHOD:'getTargetFeatures'
        │   └── COMPOUND_STMT:''
        ├── CXX_METHOD:'selectSamples'
        │   ├── PARM_DECL:'cloud'
        │   ├── PARM_DECL:'min_sample_distance'
        │   ├── PARM_DECL:'nr_samples'
        │   └── PARM_DECL:'sample_indices'
        ├── CXX_METHOD:'setCorrespondenceRandomness'
        │   ├── COMPOUND_STMT:''
        │   │   └── BINARY_OPERATOR:''
        │   │       ├── MEMBER_REF_EXPR:'k_correspondences_'
        │   │       └── UNEXPOSED_EXPR:'k'
        │   │           └── DECL_REF_EXPR:'k'
        │   └── PARM_DECL:'k'
        ├── CXX_METHOD:'setErrorFunction'
        │   ├── COMPOUND_STMT:''
        │   │   └── BINARY_OPERATOR:''
        │   │       ├── DECL_REF_EXPR:'error_functor'
        │   │       └── MEMBER_REF_EXPR:'error_functor_'
        │   └── PARM_DECL:'error_functor'
        │       └── TYPE_REF:'pcl::SampleConsensusInitialAlignment::ErrorFunctorPtr'
        ├── CXX_METHOD:'setMinSampleDistance'
        │   ├── COMPOUND_STMT:''
        │   │   └── BINARY_OPERATOR:''
        │   │       ├── MEMBER_REF_EXPR:'min_sample_distance_'
        │   │       └── UNEXPOSED_EXPR:'min_sample_distance'
        │   │           └── DECL_REF_EXPR:'min_sample_distance'
        │   └── PARM_DECL:'min_sample_distance'
        ├── CXX_METHOD:'setNumberOfSamples'
        │   ├── COMPOUND_STMT:''
        │   │   └── BINARY_OPERATOR:''
        │   │       ├── MEMBER_REF_EXPR:'nr_samples_'
        │   │       └── UNEXPOSED_EXPR:'nr_samples'
        │   │           └── DECL_REF_EXPR:'nr_samples'
        │   └── PARM_DECL:'nr_samples'
        ├── CXX_METHOD:'setSourceFeatures'
        │   └── PARM_DECL:'features'
        ├── CXX_METHOD:'setTargetFeatures'
        │   └── PARM_DECL:'features'
        ├── FIELD_DECL:'error_functor_'
        │   └── TYPE_REF:'pcl::SampleConsensusInitialAlignment::ErrorFunctorPtr'
        ├── FIELD_DECL:'feature_tree_'
        ├── FIELD_DECL:'input_features_'
        ├── FIELD_DECL:'k_correspondences_'
        ├── FIELD_DECL:'min_sample_distance_'
        ├── FIELD_DECL:'nr_samples_'
        ├── FIELD_DECL:'target_features_'
        ├── TEMPLATE_TYPE_PARAMETER:'FeatureT'
        ├── TEMPLATE_TYPE_PARAMETER:'PointSource'
        ├── TEMPLATE_TYPE_PARAMETER:'PointTarget'
        └── TYPE_ALIAS_DECL:'ErrorFunctorPtr'
            └── TYPE_REF:'class pcl::SampleConsensusInitialAlignment::ErrorFunctor'
