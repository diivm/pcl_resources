TRANSLATION_UNIT:'/pcl/registration/include/pcl/registration/icp.h'
├── INCLUSION_DIRECTIVE:'pcl/memory.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/correspondence_estimation.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/default_convergence_criteria.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/impl/icp.hpp'
├── INCLUSION_DIRECTIVE:'pcl/registration/registration.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/transformation_estimation_point_to_plane_lls.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/transformation_estimation_svd.h'
├── INCLUSION_DIRECTIVE:'pcl/registration/transformation_estimation_symmetric_point_to_plane_lls.h'
└── NAMESPACE:'pcl'
    ├── CLASS_TEMPLATE:'IterativeClosestPoint'
    │   ├── CONSTRUCTOR:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   │   ├── COMPOUND_STMT:''
    │   │   ├── CXX_NULL_PTR_LITERAL_EXPR:''
    │   │   ├── CXX_NULL_PTR_LITERAL_EXPR:''
    │   │   ├── CXX_NULL_PTR_LITERAL_EXPR:''
    │   │   ├── MEMBER_REF:'source_has_normals_'
    │   │   ├── MEMBER_REF:'target_has_normals_'
    │   │   └── MEMBER_REF:'use_reciprocal_correspondence_'
    │   ├── CONSTRUCTOR:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   │   └── PARM_DECL:''
    │   │       └── TYPE_REF:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   ├── CONSTRUCTOR:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   │   └── PARM_DECL:''
    │   │       └── TYPE_REF:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   ├── CXX_ACCESS_SPEC_DECL:''
    │   ├── CXX_METHOD:'computeTransformation'
    │   │   ├── CXX_OVERRIDE_ATTR:''
    │   │   ├── PARM_DECL:'guess'
    │   │   └── PARM_DECL:'output'
    │   ├── CXX_METHOD:'determineRequiredBlobData'
    │   ├── CXX_METHOD:'operator='
    │   │   ├── PARM_DECL:''
    │   │   │   └── TYPE_REF:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   │   └── TYPE_REF:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   ├── CXX_METHOD:'operator='
    │   │   ├── PARM_DECL:''
    │   │   │   └── TYPE_REF:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   │   └── TYPE_REF:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   ├── DESTRUCTOR:'~IterativeClosestPoint<PointSource, PointTarget, Scalar>'
    │   │   └── COMPOUND_STMT:''
    │   ├── FIELD_DECL:'need_source_blob_'
    │   ├── FIELD_DECL:'need_target_blob_'
    │   ├── FIELD_DECL:'nx_idx_offset_'
    │   ├── FIELD_DECL:'ny_idx_offset_'
    │   ├── FIELD_DECL:'nz_idx_offset_'
    │   ├── FIELD_DECL:'source_has_normals_'
    │   ├── FIELD_DECL:'target_has_normals_'
    │   ├── FIELD_DECL:'use_reciprocal_correspondence_'
    │   ├── FIELD_DECL:'x_idx_offset_'
    │   ├── FIELD_DECL:'y_idx_offset_'
    │   ├── FIELD_DECL:'z_idx_offset_'
    │   ├── TEMPLATE_TYPE_PARAMETER:'PointSource'
    │   ├── TEMPLATE_TYPE_PARAMETER:'PointTarget'
    │   └── TEMPLATE_TYPE_PARAMETER:'Scalar'
    └── CLASS_TEMPLATE:'IterativeClosestPointWithNormals'
        ├── CONSTRUCTOR:'IterativeClosestPointWithNormals<PointSource, PointTarget, Scalar>'
        │   └── COMPOUND_STMT:''
        │       ├── BINARY_OPERATOR:''
        │       │   ├── MEMBER_REF_EXPR:''
        │       │   │   └── OVERLOADED_DECL_REF:'reg_name_'
        │       │   └── STRING_LITERAL:'"IterativeClosestPointWithNormals"'
        │       ├── CALL_EXPR:'setEnforceSameDirectionNormals'
        │       │   ├── CXX_NULL_PTR_LITERAL_EXPR:''
        │       │   └── MEMBER_REF_EXPR:'setEnforceSameDirectionNormals'
        │       └── CALL_EXPR:'setUseSymmetricObjective'
        │           ├── CXX_NULL_PTR_LITERAL_EXPR:''
        │           └── MEMBER_REF_EXPR:'setUseSymmetricObjective'
        ├── CXX_ACCESS_SPEC_DECL:''
        ├── CXX_ACCESS_SPEC_DECL:''
        ├── CXX_BASE_SPECIFIER:'IterativeClosestPoint<PointSource, PointTarget, Scalar>'
        │   ├── TEMPLATE_REF:'IterativeClosestPoint'
        │   ├── TYPE_REF:'PointSource'
        │   ├── TYPE_REF:'PointTarget'
        │   └── TYPE_REF:'Scalar'
        ├── CXX_METHOD:'getEnforceSameDirectionNormals'
        │   └── COMPOUND_STMT:''
        │       └── RETURN_STMT:''
        │           └── UNEXPOSED_EXPR:'enforce_same_direction_normals_'
        │               └── MEMBER_REF_EXPR:'enforce_same_direction_normals_'
        ├── CXX_METHOD:'getUseSymmetricObjective'
        │   └── COMPOUND_STMT:''
        │       └── RETURN_STMT:''
        │           └── UNEXPOSED_EXPR:'use_symmetric_objective_'
        │               └── MEMBER_REF_EXPR:'use_symmetric_objective_'
        ├── CXX_METHOD:'setEnforceSameDirectionNormals'
        │   ├── COMPOUND_STMT:''
        │   │   ├── BINARY_OPERATOR:''
        │   │   │   ├── MEMBER_REF_EXPR:'enforce_same_direction_normals_'
        │   │   │   └── UNEXPOSED_EXPR:'enforce_same_direction_normals'
        │   │   │       └── DECL_REF_EXPR:'enforce_same_direction_normals'
        │   │   └── DECL_STMT:''
        │   │       └── VAR_DECL:'symmetric_transformation_estimation'
        │   └── PARM_DECL:'enforce_same_direction_normals'
        ├── CXX_METHOD:'setUseSymmetricObjective'
        │   ├── COMPOUND_STMT:''
        │   │   ├── BINARY_OPERATOR:''
        │   │   │   ├── MEMBER_REF_EXPR:'use_symmetric_objective_'
        │   │   │   └── UNEXPOSED_EXPR:'use_symmetric_objective'
        │   │   │       └── DECL_REF_EXPR:'use_symmetric_objective'
        │   │   └── IF_STMT:''
        │   │       ├── COMPOUND_STMT:''
        │   │       │   └── DECL_STMT:''
        │   │       │       ├── VAR_DECL:'PointTarget'
        │   │       │       └── VAR_DECL:'symmetric_transformation_estimation'
        │   │       ├── COMPOUND_STMT:''
        │   │       └── UNEXPOSED_EXPR:'use_symmetric_objective_'
        │   │           └── MEMBER_REF_EXPR:'use_symmetric_objective_'
        │   └── PARM_DECL:'use_symmetric_objective'
        ├── CXX_METHOD:'transformCloud'
        │   ├── PARM_DECL:'input'
        │   │   └── TYPE_REF:'pcl::IterativeClosestPointWithNormals::PointCloudSource'
        │   ├── PARM_DECL:'output'
        │   │   └── TYPE_REF:'pcl::IterativeClosestPointWithNormals::PointCloudSource'
        │   └── PARM_DECL:'transform'
        │       └── TYPE_REF:'pcl::IterativeClosestPointWithNormals::Matrix4'
        ├── DESTRUCTOR:'~IterativeClosestPointWithNormals<PointSource, PointTarget, Scalar>'
        │   └── COMPOUND_STMT:''
        ├── FIELD_DECL:'enforce_same_direction_normals_'
        ├── FIELD_DECL:'use_symmetric_objective_'
        ├── TEMPLATE_TYPE_PARAMETER:'PointSource'
        ├── TEMPLATE_TYPE_PARAMETER:'PointTarget'
        ├── TEMPLATE_TYPE_PARAMETER:'Scalar'
        ├── TYPE_ALIAS_DECL:'Matrix4'
        │   ├── TEMPLATE_REF:'IterativeClosestPoint'
        │   ├── TYPE_REF:'PointSource'
        │   ├── TYPE_REF:'PointTarget'
        │   └── TYPE_REF:'Scalar'
        ├── TYPE_ALIAS_DECL:'PointCloudSource'
        │   ├── TEMPLATE_REF:'IterativeClosestPoint'
        │   ├── TYPE_REF:'PointSource'
        │   ├── TYPE_REF:'PointTarget'
        │   └── TYPE_REF:'Scalar'
        ├── TYPE_ALIAS_DECL:'PointCloudTarget'
        │   ├── TEMPLATE_REF:'IterativeClosestPoint'
        │   ├── TYPE_REF:'PointSource'
        │   ├── TYPE_REF:'PointTarget'
        │   └── TYPE_REF:'Scalar'
        ├── USING_DECLARATION:'correspondence_rejectors_'
        │   ├── TEMPLATE_REF:'IterativeClosestPoint'
        │   ├── TYPE_REF:'PointSource'
        │   ├── TYPE_REF:'PointTarget'
        │   └── TYPE_REF:'Scalar'
        ├── USING_DECLARATION:'reg_name_'
        │   ├── TEMPLATE_REF:'IterativeClosestPoint'
        │   ├── TYPE_REF:'PointSource'
        │   ├── TYPE_REF:'PointTarget'
        │   └── TYPE_REF:'Scalar'
        └── USING_DECLARATION:'transformation_estimation_'
            ├── TEMPLATE_REF:'IterativeClosestPoint'
            ├── TYPE_REF:'PointSource'
            ├── TYPE_REF:'PointTarget'
            └── TYPE_REF:'Scalar'
