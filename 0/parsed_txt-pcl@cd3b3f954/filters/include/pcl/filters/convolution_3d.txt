TRANSLATION_UNIT:'/pcl/filters/include/pcl/filters/convolution_3d.h'
├── INCLUSION_DIRECTIVE:'pcl/filters/impl/convolution_3d.hpp'
├── INCLUSION_DIRECTIVE:'pcl/pcl_base.h'
└── NAMESPACE:'pcl'
    └── NAMESPACE:'filters'
        ├── CLASS_TEMPLATE:'Convolution3D'
        │   ├── CONSTRUCTOR:'Convolution3D<PointIn, PointOut, KernelT>'
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_METHOD:'convolve'
        │   │   └── PARM_DECL:'output'
        │   ├── CXX_METHOD:'getRadiusSearch'
        │   │   └── COMPOUND_STMT:''
        │   │       └── RETURN_STMT:''
        │   │           └── UNEXPOSED_EXPR:''
        │   │               └── PAREN_EXPR:''
        │   │                   └── MEMBER_REF_EXPR:'search_radius_'
        │   ├── CXX_METHOD:'getSearchMethod'
        │   │   └── COMPOUND_STMT:''
        │   ├── CXX_METHOD:'getSearchSurface'
        │   │   └── COMPOUND_STMT:''
        │   ├── CXX_METHOD:'initCompute'
        │   ├── CXX_METHOD:'setKernel'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   └── BINARY_OPERATOR:''
        │   │   │       ├── DECL_REF_EXPR:'kernel'
        │   │   │       └── MEMBER_REF_EXPR:'kernel_'
        │   │   └── PARM_DECL:'kernel'
        │   │       └── TYPE_REF:'KernelT'
        │   ├── CXX_METHOD:'setNumberOfThreads'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   └── BINARY_OPERATOR:''
        │   │   │       ├── MEMBER_REF_EXPR:'threads_'
        │   │   │       └── UNEXPOSED_EXPR:'nr_threads'
        │   │   │           └── DECL_REF_EXPR:'nr_threads'
        │   │   └── PARM_DECL:'nr_threads'
        │   │       └── UNEXPOSED_EXPR:''
        │   │           └── INTEGER_LITERAL:''
        │   ├── CXX_METHOD:'setRadiusSearch'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   └── BINARY_OPERATOR:''
        │   │   │       ├── MEMBER_REF_EXPR:'search_radius_'
        │   │   │       └── UNEXPOSED_EXPR:'radius'
        │   │   │           └── DECL_REF_EXPR:'radius'
        │   │   └── PARM_DECL:'radius'
        │   ├── CXX_METHOD:'setSearchMethod'
        │   │   ├── COMPOUND_STMT:''
        │   │   └── PARM_DECL:'tree'
        │   ├── CXX_METHOD:'setSearchSurface'
        │   │   ├── COMPOUND_STMT:''
        │   │   └── PARM_DECL:'cloud'
        │   ├── DESTRUCTOR:'~Convolution3D<PointIn, PointOut, KernelT>'
        │   │   └── COMPOUND_STMT:''
        │   ├── FIELD_DECL:'kernel_'
        │   │   └── TYPE_REF:'KernelT'
        │   ├── FIELD_DECL:'search_radius_'
        │   ├── FIELD_DECL:'surface_'
        │   ├── FIELD_DECL:'threads_'
        │   ├── FIELD_DECL:'tree_'
        │   ├── TEMPLATE_TYPE_PARAMETER:'KernelT'
        │   ├── TEMPLATE_TYPE_PARAMETER:'PointIn'
        │   └── TEMPLATE_TYPE_PARAMETER:'PointOut'
        ├── CLASS_TEMPLATE:'ConvolvingKernel'
        │   ├── CONSTRUCTOR:'ConvolvingKernel<PointInT, PointOutT>'
        │   │   └── COMPOUND_STMT:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_METHOD:'initCompute'
        │   │   └── COMPOUND_STMT:''
        │   │       └── RETURN_STMT:''
        │   │           └── CXX_NULL_PTR_LITERAL_EXPR:''
        │   ├── CXX_METHOD:'makeInfinite'
        │   │   ├── COMPOUND_STMT:''
        │   │   └── PARM_DECL:'p'
        │   │       └── TYPE_REF:'PointOutT'
        │   ├── CXX_METHOD:'operator()'
        │   │   ├── PARM_DECL:'distances'
        │   │   ├── PARM_DECL:'indices'
        │   │   └── TYPE_REF:'PointOutT'
        │   ├── CXX_METHOD:'setInputCloud'
        │   │   ├── COMPOUND_STMT:''
        │   │   └── PARM_DECL:'input'
        │   ├── DESTRUCTOR:'~ConvolvingKernel<PointInT, PointOutT>'
        │   │   └── COMPOUND_STMT:''
        │   ├── FIELD_DECL:'input_'
        │   ├── TEMPLATE_TYPE_PARAMETER:'PointInT'
        │   └── TEMPLATE_TYPE_PARAMETER:'PointOutT'
        ├── CLASS_TEMPLATE:'GaussianKernel'
        │   ├── CONSTRUCTOR:'GaussianKernel<PointInT, PointOutT>'
        │   │   ├── COMPOUND_STMT:''
        │   │   ├── MEMBER_REF:'sigma_'
        │   │   ├── TEMPLATE_REF:'ConvolvingKernel'
        │   │   ├── TYPE_REF:'PointInT'
        │   │   ├── TYPE_REF:'PointOutT'
        │   │   ├── UNEXPOSED_EXPR:''
        │   │   └── UNEXPOSED_EXPR:''
        │   │       └── INTEGER_LITERAL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_ACCESS_SPEC_DECL:''
        │   ├── CXX_BASE_SPECIFIER:'ConvolvingKernel<PointInT, PointOutT>'
        │   │   ├── TEMPLATE_REF:'ConvolvingKernel'
        │   │   ├── TYPE_REF:'PointInT'
        │   │   └── TYPE_REF:'PointOutT'
        │   ├── CXX_METHOD:'initCompute'
        │   ├── CXX_METHOD:'operator()'
        │   │   ├── PARM_DECL:'distances'
        │   │   ├── PARM_DECL:'indices'
        │   │   └── TYPE_REF:'PointOutT'
        │   ├── CXX_METHOD:'setSigma'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   └── BINARY_OPERATOR:''
        │   │   │       ├── MEMBER_REF_EXPR:'sigma_'
        │   │   │       └── UNEXPOSED_EXPR:'sigma'
        │   │   │           └── DECL_REF_EXPR:'sigma'
        │   │   └── PARM_DECL:'sigma'
        │   ├── CXX_METHOD:'setThreshold'
        │   │   ├── COMPOUND_STMT:''
        │   │   │   └── BINARY_OPERATOR:''
        │   │   │       ├── MEMBER_REF_EXPR:'threshold_'
        │   │   │       └── UNEXPOSED_EXPR:'threshold'
        │   │   │           └── DECL_REF_EXPR:'threshold'
        │   │   └── PARM_DECL:'threshold'
        │   ├── CXX_METHOD:'setThresholdRelativeToSigma'
        │   │   ├── COMPOUND_STMT:''
        │   │   └── PARM_DECL:'sigma_coefficient'
        │   ├── DESTRUCTOR:'~GaussianKernel<PointInT, PointOutT>'
        │   │   └── COMPOUND_STMT:''
        │   ├── FIELD_DECL:'sigma_'
        │   ├── FIELD_DECL:'sigma_coefficient_'
        │   ├── FIELD_DECL:'sigma_sqr_'
        │   ├── FIELD_DECL:'threshold_'
        │   ├── TEMPLATE_TYPE_PARAMETER:'PointInT'
        │   ├── TEMPLATE_TYPE_PARAMETER:'PointOutT'
        │   ├── USING_DECLARATION:'initCompute'
        │   │   ├── TEMPLATE_REF:'ConvolvingKernel'
        │   │   ├── TYPE_REF:'PointInT'
        │   │   └── TYPE_REF:'PointOutT'
        │   ├── USING_DECLARATION:'input_'
        │   │   ├── TEMPLATE_REF:'ConvolvingKernel'
        │   │   ├── TYPE_REF:'PointInT'
        │   │   └── TYPE_REF:'PointOutT'
        │   ├── USING_DECLARATION:'makeInfinite'
        │   │   ├── TEMPLATE_REF:'ConvolvingKernel'
        │   │   ├── TYPE_REF:'PointInT'
        │   │   └── TYPE_REF:'PointOutT'
        │   └── USING_DECLARATION:'operator()'
        │       ├── TEMPLATE_REF:'ConvolvingKernel'
        │       ├── TYPE_REF:'PointInT'
        │       └── TYPE_REF:'PointOutT'
        └── CLASS_TEMPLATE:'GaussianKernelRGB'
            ├── CONSTRUCTOR:'GaussianKernelRGB<PointInT, PointOutT>'
            │   ├── COMPOUND_STMT:''
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   ├── TYPE_REF:'PointOutT'
            │   └── UNEXPOSED_EXPR:''
            ├── CXX_ACCESS_SPEC_DECL:''
            ├── CXX_BASE_SPECIFIER:'GaussianKernel<PointInT, PointOutT>'
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   └── TYPE_REF:'PointOutT'
            ├── CXX_METHOD:'operator()'
            │   ├── PARM_DECL:'distances'
            │   ├── PARM_DECL:'indices'
            │   └── TYPE_REF:'PointOutT'
            ├── DESTRUCTOR:'~GaussianKernelRGB<PointInT, PointOutT>'
            │   └── COMPOUND_STMT:''
            ├── TEMPLATE_TYPE_PARAMETER:'PointInT'
            ├── TEMPLATE_TYPE_PARAMETER:'PointOutT'
            ├── USING_DECLARATION:'initCompute'
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   └── TYPE_REF:'PointOutT'
            ├── USING_DECLARATION:'input_'
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   └── TYPE_REF:'PointOutT'
            ├── USING_DECLARATION:'makeInfinite'
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   └── TYPE_REF:'PointOutT'
            ├── USING_DECLARATION:'operator()'
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   └── TYPE_REF:'PointOutT'
            ├── USING_DECLARATION:'sigma_sqr_'
            │   ├── TEMPLATE_REF:'GaussianKernel'
            │   ├── TYPE_REF:'PointInT'
            │   └── TYPE_REF:'PointOutT'
            └── USING_DECLARATION:'threshold_'
                ├── TEMPLATE_REF:'GaussianKernel'
                ├── TYPE_REF:'PointInT'
                └── TYPE_REF:'PointOutT'
