TRANSLATION_UNIT:'/pcl/common/include/pcl/type_traits.h'
├── INCLUSION_DIRECTIVE:'cstddef'
├── INCLUSION_DIRECTIVE:'cstdint'
├── INCLUSION_DIRECTIVE:'functional'
├── INCLUSION_DIRECTIVE:'pcl/point_struct_traits.h'
├── INCLUSION_DIRECTIVE:'string'
├── INCLUSION_DIRECTIVE:'type_traits'
└── NAMESPACE:'pcl'
    ├── CLASS_TEMPLATE:'CopyIfFieldExists'
    │   ├── CONSTRUCTOR:'CopyIfFieldExists<PointInT, OutT>'
    │   │   ├── COMPOUND_STMT:''
    │   │   │   └── BINARY_OPERATOR:''
    │   │   │       ├── CXX_NULL_PTR_LITERAL_EXPR:''
    │   │   │       └── MEMBER_REF_EXPR:'exists_'
    │   │   ├── DECL_REF_EXPR:'exists'
    │   │   ├── MEMBER_REF:'exists_'
    │   │   ├── MEMBER_REF:'value_'
    │   │   ├── PARM_DECL:'exists'
    │   │   ├── PARM_DECL:'field'
    │   │   ├── PARM_DECL:'pt'
    │   │   │   └── TYPE_REF:'PointInT'
    │   │   ├── PARM_DECL:'value'
    │   │   │   └── TYPE_REF:'OutT'
    │   │   └── UNEXPOSED_EXPR:''
    │   │       └── DECL_REF_EXPR:'value'
    │   ├── CONSTRUCTOR:'CopyIfFieldExists<PointInT, OutT>'
    │   │   ├── COMPOUND_STMT:''
    │   │   ├── MEMBER_REF:'exists_'
    │   │   ├── MEMBER_REF:'value_'
    │   │   ├── MEMBER_REF_EXPR:'exists_tmp_'
    │   │   ├── PARM_DECL:'field'
    │   │   ├── PARM_DECL:'pt'
    │   │   │   └── TYPE_REF:'PointInT'
    │   │   ├── PARM_DECL:'value'
    │   │   │   └── TYPE_REF:'OutT'
    │   │   └── UNEXPOSED_EXPR:''
    │   │       └── DECL_REF_EXPR:'value'
    │   ├── CXX_ACCESS_SPEC_DECL:''
    │   ├── FIELD_DECL:'exists_'
    │   ├── FIELD_DECL:'exists_tmp_'
    │   ├── FIELD_DECL:'name_'
    │   ├── FIELD_DECL:'pt_'
    │   ├── FIELD_DECL:'value_'
    │   │   └── TYPE_REF:'OutT'
    │   ├── FUNCTION_TEMPLATE:'operator()'
    │   │   ├── COMPOUND_STMT:''
    │   │   │   └── IF_STMT:''
    │   │   │       └── COMPOUND_STMT:''
    │   │   │           ├── BINARY_OPERATOR:''
    │   │   │           │   ├── CXX_NULL_PTR_LITERAL_EXPR:''
    │   │   │           │   └── MEMBER_REF_EXPR:'exists_'
    │   │   │           └── DECL_STMT:''
    │   │   │               └── VAR_DECL:'data_ptr'
    │   │   └── TEMPLATE_TYPE_PARAMETER:'Key'
    │   ├── TEMPLATE_TYPE_PARAMETER:'OutT'
    │   └── TEMPLATE_TYPE_PARAMETER:'PointInT'
    ├── CLASS_TEMPLATE:'SetIfFieldExists'
    │   ├── CONSTRUCTOR:'SetIfFieldExists<PointOutT, InT>'
    │   │   ├── COMPOUND_STMT:''
    │   │   ├── MEMBER_REF:'value_'
    │   │   ├── PARM_DECL:'field'
    │   │   ├── PARM_DECL:'pt'
    │   │   │   └── TYPE_REF:'PointOutT'
    │   │   ├── PARM_DECL:'value'
    │   │   │   └── TYPE_REF:'InT'
    │   │   └── UNEXPOSED_EXPR:''
    │   │       └── DECL_REF_EXPR:'value'
    │   ├── CXX_ACCESS_SPEC_DECL:''
    │   ├── FIELD_DECL:'name_'
    │   ├── FIELD_DECL:'pt_'
    │   ├── FIELD_DECL:'value_'
    │   │   └── TYPE_REF:'InT'
    │   ├── FUNCTION_TEMPLATE:'operator()'
    │   │   ├── COMPOUND_STMT:''
    │   │   │   └── IF_STMT:''
    │   │   │       └── COMPOUND_STMT:''
    │   │   │           └── DECL_STMT:''
    │   │   │               └── VAR_DECL:'data_ptr'
    │   │   └── TEMPLATE_TYPE_PARAMETER:'Key'
    │   ├── TEMPLATE_TYPE_PARAMETER:'InT'
    │   └── TEMPLATE_TYPE_PARAMETER:'PointOutT'
    ├── CLASS_TEMPLATE:'has_custom_allocator'
    │   ├── TEMPLATE_TYPE_PARAMETER:''
    │   └── TEMPLATE_TYPE_PARAMETER:''
    ├── FUNCTION_TEMPLATE:'getFieldValue'
    │   ├── COMPOUND_STMT:''
    │   │   └── DECL_STMT:''
    │   │       └── VAR_DECL:'data_ptr'
    │   ├── PARM_DECL:'field_offset'
    │   ├── PARM_DECL:'pt'
    │   │   └── TYPE_REF:'PointT'
    │   ├── PARM_DECL:'value'
    │   │   └── TYPE_REF:'ValT'
    │   ├── TEMPLATE_TYPE_PARAMETER:'PointT'
    │   └── TEMPLATE_TYPE_PARAMETER:'ValT'
    ├── FUNCTION_TEMPLATE:'setFieldValue'
    │   ├── COMPOUND_STMT:''
    │   │   └── DECL_STMT:''
    │   │       └── VAR_DECL:'data_ptr'
    │   ├── PARM_DECL:'field_offset'
    │   ├── PARM_DECL:'pt'
    │   │   └── TYPE_REF:'PointT'
    │   ├── PARM_DECL:'value'
    │   │   └── TYPE_REF:'ValT'
    │   ├── TEMPLATE_TYPE_PARAMETER:'PointT'
    │   └── TEMPLATE_TYPE_PARAMETER:'ValT'
    ├── NAMESPACE:'deprecated'
    │   └── STRUCT_DECL:'T'
    ├── NAMESPACE:'fields'
    ├── NAMESPACE:'traits'
    │   ├── CLASS_TEMPLATE:'asEnum'
    │   │   └── TEMPLATE_TYPE_PARAMETER:'T'
    │   ├── CLASS_TEMPLATE:'asType'
    │   │   └── TEMPLATE_NON_TYPE_PARAMETER:''
    │   ├── NAMESPACE:'detail'
    │   │   └── STRUCT_DECL:'PointFieldTypes'
    │   │       ├── VAR_DECL:'FLOAT32'
    │   │       ├── VAR_DECL:'FLOAT64'
    │   │       ├── VAR_DECL:'INT16'
    │   │       ├── VAR_DECL:'INT32'
    │   │       ├── VAR_DECL:'INT8'
    │   │       ├── VAR_DECL:'UINT16'
    │   │       ├── VAR_DECL:'UINT32'
    │   │       └── VAR_DECL:'UINT8'
    │   ├── STRUCT_DECL:'asEnum'
    │   │   └── VAR_DECL:'value'
    │   ├── STRUCT_DECL:'asEnum'
    │   │   └── VAR_DECL:'value'
    │   ├── TYPE_ALIAS_TEMPLATE_DECL:'asType_t'
    │   │   ├── TEMPLATE_NON_TYPE_PARAMETER:'index'
    │   │   └── TYPE_ALIAS_DECL:'asType_t'
    │   │       ├── DECL_REF_EXPR:'index'
    │   │       └── TEMPLATE_REF:'asType'
    │   └── UNEXPOSED_DECL:'asEnum_v'
    ├── TYPE_ALIAS_TEMPLATE_DECL:'void_t'
    │   ├── TEMPLATE_TYPE_PARAMETER:''
    │   └── TYPE_ALIAS_DECL:'void_t'
    ├── UNEXPOSED_DECL:'is_invocable_r_v'
    └── UNEXPOSED_DECL:'is_invocable_v'
